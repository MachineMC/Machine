package org.machinemc.api.world.blocks;

import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.Nullable;
import org.machinemc.api.utils.NamespacedKey;
import org.machinemc.api.world.BlockPosition;
import org.machinemc.api.world.World;
import org.machinemc.nbt.NBTCompound;

import java.awt.*;

/**
 * Represents a block type with name, properties and custom behaviour.
 */
public interface BlockType {

    /**
     * @return name of the block type
     */
    NamespacedKey getName();

    /**
     * @return block properties of the block type
     */
    BlockProperties getProperties();

    /**
     * Provides a visual for a block in a world.
     * @param block block
     * @return visual for the block
     * @apiNote block argument can be null in case
     * the visual isn't dynamic {@link BlockType#hasDynamicVisual()}
     */
    @Contract("_ -> new")
    BlockVisual getVisual(@Nullable WorldBlock block);

    /**
     * Whether the visual is dynamic and can be changed depending
     * on block's data and has to be calculated for each world block
     * separately.
     * @return whether the visual is dynamic
     */
    boolean hasDynamicVisual();

    /**
     * @return whether the block type has a block compound for
     * storing additional data
     */
    boolean isTileEntity();

    // TODO ticking

    /**
     * @return NBT compound that should be saved to the block that has been
     * just generated by a generator
     */
    @Nullable NBTCompound init(World world, BlockPosition position);

    /**
     * Called when a new world block of this block type is created.
     * @param block created world block
     */
    void place(WorldBlock block); // TODO Event argument as source of the creation

    /**
     * Called when a world block of this block type is removed.
     * @param block removed world block
     */
    void destroy(WorldBlock block); // TODO Event argument as source of the destruction

    /**
     * Called when a world block of this type is updated.
     * @param block updated world block
     */
    void update(WorldBlock block); // TODO Event argument as source of the update

    /**
     * Represents properties of block types.
     */
    interface BlockProperties {

        /**
         * @return color of the block type
         */
        Color getColor();

        /**
         * @return if the block type has a collision
         */
        boolean isHasCollision();

        /**
         * @return if the block is air
         */
        boolean isAir();

        /**
         * @return block hardness of the block type
         */
        float getBlockHardness();

        /**
         * @return if entities can spawn on the block type
         */
        boolean isAllowsSpawning();

        /**
         * @return if the block type is solid
         */
        boolean isSolidBlock();

        /**
         * @return if the block type is transparent
         */
        boolean isTransparent();

        /**
         * @return if the block type has dynamic shape
         */
        boolean isDynamicShape();

        // TODO sound

    }

}
